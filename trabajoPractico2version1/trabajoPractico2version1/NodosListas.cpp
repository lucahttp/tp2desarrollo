//nodos para listas de componentes para la hamburguesa


#include <stdlib.h>

#include <iostream.h>

#include <sstream.h>

#include "estructuras.h"
using namespace std;










 // _   _  ____  _____   ____   _____            _      _____  _____ _______        _____ 
 //| \ | |/ __ \|  __ \ / __ \ / ____|   ___    | |    |_   _|/ ____|__   __|/\    / ____|
 //|  \| | |  | | |  | | |  | | (___    ( _ )   | |      | | | (___    | |  /  \  | (___  
 //| . ` | |  | | |  | | |  | |\___ \   / _ \/\ | |      | |  \___ \   | | / /\ \  \___ \ 
 //| |\  | |__| | |__| | |__| |____) | | (_>  < | |____ _| |_ ____) |  | |/ ____ \ ____) |
 //|_| \_|\____/|_____/ \____/|_____/   \___/\/ |______|_____|_____/   |_/_/    \_\_____/ 
 //                                                                                       
 //                                                                                    













// ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄            ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄ 
//▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░▌          ▐░▌          ▐░░░░░░░░░░░▌▐░░▌      ▐░▌
//▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░▌          ▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌
//▐░▌▐░▌ ▐░▌▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌▐░▌    ▐░▌
//▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌ ▐░▌   ▐░▌
//▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌  ▐░▌  ▐░▌
//▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌   ▐░▌ ▐░▌
//▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌    ▐░▌▐░▌
//▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌     ▐░▐░▌
//▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌      ▐░░▌
// ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀        ▀▀ 
//                                                                                                  



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//video sobre listas 

// https://www.youtube.com/watch?v=o5wJkJJpKtM



 //  _____                    _                        _   _            _         __  __          _       _ _                       
 // / ____|                  | |                      | \ | |   ___    | |       |  \/  |        | |     | | |                      
 //| |     _ __ ___  __ _  __| | ___  _ __ ___  ___   |  \| |  ( _ )   | |       | \  / | ___  __| | __ _| | | ___  _ __   ___  ___ 
 //| |    | '__/ _ \/ _` |/ _` |/ _ \| '__/ _ \/ __|  | . ` |  / _ \/\ | |       | |\/| |/ _ \/ _` |/ _` | | |/ _ \| '_ \ / _ \/ __|
 //| |____| | |  __/ (_| | (_| | (_) | | |  __/\__ \  | |\  | | (_>  < | |____   | |  | |  __/ (_| | (_| | | | (_) | | | |  __/\__ \
 // \_____|_|  \___|\__,_|\__,_|\___/|_|  \___||___/  |_| \_|  \___/\/ |______|  |_|  |_|\___|\__,_|\__,_|_|_|\___/|_| |_|\___||___/
 //                                                                                                                                 
 //                                                                                          

//creador de nodos y listas de medallones



ListaMedallon* medallonAgregarUnaLista() {
	ListaMedallon* nueva_lista = new ListaMedallon;
	nueva_lista->primerPaty = NULL;
	return nueva_lista;
}

NodoMedallon* medallonAgregarUnaNodo(MedallonDeCarne *nuevo_medallon) {
	NodoMedallon* nuevo_nodo_medallon = new NodoMedallon;
	nuevo_nodo_medallon->nuevo_medallon = nuevo_medallon;
	nuevo_nodo_medallon->nuevo_medallon = NULL;
	return nuevo_nodo_medallon;
}


 // ______                _                          _   _            _         __  __          _       _ _                       
 //|  ____|              (_)                        | \ | |   ___    | |       |  \/  |        | |     | | |                      
 //| |__ _   _ _ __   ___ _  ___  _ __   ___  ___   |  \| |  ( _ )   | |       | \  / | ___  __| | __ _| | | ___  _ __   ___  ___ 
 //|  __| | | | '_ \ / __| |/ _ \| '_ \ / _ \/ __|  | . ` |  / _ \/\ | |       | |\/| |/ _ \/ _` |/ _` | | |/ _ \| '_ \ / _ \/ __|
 //| |  | |_| | | | | (__| | (_) | | | |  __/\__ \  | |\  | | (_>  < | |____   | |  | |  __/ (_| | (_| | | | (_) | | | |  __/\__ \
 //|_|   \__,_|_| |_|\___|_|\___/|_| |_|\___||___/  |_| \_|  \___/\/ |______|  |_|  |_|\___|\__,_|\__,_|_|_|\___/|_| |_|\___||___/
 //                                                                                                                               
                                                                           


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// funcion para agregar un nodo a la lista ya antes creada por la funcion agregar hamburguesa

void medallonAgregarUnNodo(ListaMedallon* lista, NodoMedallon* nodoPaty) {
	if (medallonListaEstaVacia(lista)) {
		lista->primerElemento = nodoPaty;
	}
	else {
		NodoMedallon* ultimoNodo = medallonPunteroAUltimoNodo(lista);
		ultimoNodo->siguiente = nodoPaty;
	}
}

//cosas usadas por agregar nodo a una lista


		bool medallonListaEstaVacia(ListaMedallon* lista) {
			return lista->primerElemento == NULL;
		}



		//listaPatyUltimoElemento
		NodoMedallon* medallonPunteroAUltimoNodo(ListaMedallon* lista) {

			NodoMedallon* nodoAuxiliar = lista->primerElemento;
			while (nodoAuxiliar->siguiente != NULL)
			{
				nodoAuxiliar = nodoAuxiliar->siguiente;
			}
			return nodoAuxiliar;
		}



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











 // ____       _     _     _       
 //|  _ \     | |   (_)   | |      
 //| |_) | ___| |__  _  __| | __ _ 
 //|  _ < / _ \ '_ \| |/ _` |/ _` |
 //| |_) |  __/ |_) | | (_| | (_| |
 //|____/ \___|_.__/|_|\__,_|\__,_|
 //                                

////////////////////////////////////////////////////////////////////////////
//no hay struct de nodo y lista para las gaseosas




// ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
//▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
//▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌
//▐░▌          ▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌
//▐░▌          ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌
//▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
//▐░▌          ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀█░█▀▀ 
//▐░▌          ▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌     ▐░▌  
//▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░▌      ▐░▌ 
//▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░▌       ▐░▌
// ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀   ▀         ▀  ▀         ▀ 
                                              

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






 //  _____                    _                        _   _            _          _____ _              _     _            
 // / ____|                  | |                      | \ | |   ___    | |        / ____| |            | |   | |           
 //| |     _ __ ___  __ _  __| | ___  _ __ ___  ___   |  \| |  ( _ )   | |       | |    | |__   ___  __| | __| | __ _ _ __ 
 //| |    | '__/ _ \/ _` |/ _` |/ _ \| '__/ _ \/ __|  | . ` |  / _ \/\ | |       | |    | '_ \ / _ \/ _` |/ _` |/ _` | '__|
 //| |____| | |  __/ (_| | (_| | (_) | | |  __/\__ \  | |\  | | (_>  < | |____   | |____| | | |  __/ (_| | (_| | (_| | |   
 // \_____|_|  \___|\__,_|\__,_|\___/|_|  \___||___/  |_| \_|  \___/\/ |______|   \_____|_| |_|\___|\__,_|\__,_|\__,_|_|   
                                                                                                                         
                                                                                                                    

//creador de nodos y listas de medallones

ListaCheddar* agregoUnaListaDeheddars() {
	ListaCheddar* nueva_lista = new ListaCheddar;
	nueva_lista->primerCheddar = NULL;
	return nueva_lista;
}

NodoCheddar* agregarUnNodoDeTipoCheddar(Cheddar* nuevo_cheddar) {
	NodoCheddar* nuevo_nodo_cheddar = new NodoCheddar;
	nuevo_nodo_cheddar->nuevo_cheddar = nuevo_cheddar;
	nuevo_nodo_cheddar->nuevo_cheddar = NULL;
	return nuevo_nodo_cheddar;
}


 // ______                _                          _   _            _          _____ _              _     _            
 //|  ____|              (_)                        | \ | |   ___    | |        / ____| |            | |   | |           
 //| |__ _   _ _ __   ___ _  ___  _ __   ___  ___   |  \| |  ( _ )   | |       | |    | |__   ___  __| | __| | __ _ _ __ 
 //|  __| | | | '_ \ / __| |/ _ \| '_ \ / _ \/ __|  | . ` |  / _ \/\ | |       | |    | '_ \ / _ \/ _` |/ _` |/ _` | '__|
 //| |  | |_| | | | | (__| | (_) | | | |  __/\__ \  | |\  | | (_>  < | |____   | |____| | | |  __/ (_| | (_| | (_| | |   
 //|_|   \__,_|_| |_|\___|_|\___/|_| |_|\___||___/  |_| \_|  \___/\/ |______|   \_____|_| |_|\___|\__,_|\__,_|\__,_|_|   
                                                                                                                       
            

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// funcion para agregar un nodo a la lista ya antes creada por la funcion agregar hamburguesa

void cheddarAgregarUnNodo(ListaCheddar* lista, NodoCheddar* nodoCheddar) {
	if (CheddarListaVacia(lista)) {
		lista->primerElemento = nodoCheddar;
	}
	else {
		NodoCheddar* ultimoNodo = punteroAElUltimoNodoDeLaListaDeCheddars(lista);
		ultimoNodo->siguiente = nodoCheddar;
	}
}

//cosas usadas por agregar nodo a una lista


bool CheddarListaVacia(ListaCheddar* lista) {
	return lista->primerElemento == NULL;
}
//listaPatyUltimoElemento
NodoCheddar* cheddarPunteroAUltimoNodo(ListaCheddar* lista) 
{
	NodoCheddar* nodoAuxiliar = lista->primerElemento;
	while (nodoAuxiliar->siguiente != NULL)
	{
		nodoAuxiliar = nodoAuxiliar->siguiente;
	}
	return nodoAuxiliar;
}



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










//
//
//
// ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
//▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
//▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌
//▐░▌       ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌          ▐░▌               ▐░▌     ▐░▌       ▐░▌
//▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌   ▐░▌▐░▌          ▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌
//▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌▐░▌          ▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░░▌
//▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀      ▐░▌     ▐░█▀▀▀▀▀▀▀█░▌
//▐░▌          ▐░▌       ▐░▌▐░▌    ▐░▌▐░▌▐░▌          ▐░▌               ▐░▌     ▐░▌       ▐░▌
//▐░▌          ▐░▌       ▐░▌▐░▌     ▐░▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░▌       ▐░▌
//▐░▌          ▐░▌       ▐░▌▐░▌      ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌       ▐░▌
// ▀            ▀         ▀  ▀        ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀       ▀       ▀         ▀ 
//                                                                                         
//




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





 //  _____                    _                        _   _        _        _____                     _        
 // / ____|                  | |                      | \ | | ___  | |      |  __ \                   | |       
 //| |     _ __ ___  __ _  __| | ___  _ __ ___  ___   |  \| |( _ ) | |      | |__) |_ _ _ __   ___ ___| |_ __ _ 
 //| |    | '__/ _ \/ _` |/ _` |/ _ \| '__/ _ \/ __|  | . ` |/ _ \/\ |      |  ___/ _` | '_ \ / __/ _ \ __/ _` |
 //| |____| | |  __/ (_| | (_| | (_) | | |  __/\__ \  | |\  | (_>  < |____  | |  | (_| | | | | (_|  __/ || (_| |
 // \_____|_|  \___|\__,_|\__,_|\___/|_|  \___||___/  |_| \_|\___/\/______| |_|   \__,_|_| |_|\___\___|\__\__,_|
                                                                                                              
                                                                

//creador de nodos y listas de medallones

ListaCheddar* agregoUnaListaDeheddars() {
	ListaCheddar* nueva_lista = new ListaCheddar;
	nueva_lista->primerCheddar = NULL;
	return nueva_lista;
}

NodoCheddar* agregarUnNodoDeTipoCheddar(Cheddar* nuevo_cheddar) {
	NodoCheddar* nuevo_nodo_cheddar = new NodoCheddar;
	nuevo_nodo_cheddar->nuevo_cheddar = nuevo_cheddar;
	nuevo_nodo_cheddar->nuevo_cheddar = NULL;
	return nuevo_nodo_cheddar;
}

 // ______                _                          _   _        _        _____                     _        
 //|  ____|              (_)                        | \ | | ___  | |      |  __ \                   | |       
 //| |__ _   _ _ __   ___ _  ___  _ __   ___  ___   |  \| |( _ ) | |      | |__) |_ _ _ __   ___ ___| |_ __ _ 
 //|  __| | | | '_ \ / __| |/ _ \| '_ \ / _ \/ __|  | . ` |/ _ \/\ |      |  ___/ _` | '_ \ / __/ _ \ __/ _` |
 //| |  | |_| | | | | (__| | (_) | | | |  __/\__ \  | |\  | (_>  < |____  | |  | (_| | | | | (_|  __/ || (_| |
 //|_|   \__,_|_| |_|\___|_|\___/|_| |_|\___||___/  |_| \_|\___/\/______| |_|   \__,_|_| |_|\___\___|\__\__,_|
 //                             


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// funcion para agregar un nodo a la lista ya antes creada por la funcion agregar hamburguesa

void agregarUnNodoALaListaDeCheddar(ListaCheddar* lista, NodoCheddar* nodoCheddar) {
	if (listaCheddarEstaVacia(lista)) {
		lista->primerElemento = nodoCheddar;
	}
	else {
		NodoCheddar* ultimoNodo = punteroAElUltimoNodoDeLaListaDeCheddars(lista);
		ultimoNodo->siguiente = nodoCheddar;
	}
}

//cosas usadas por agregar nodo a una lista


bool listaCheddarEstaVacia(ListaCheddar* lista) {
	return lista->primerElemento == NULL;
}

//listaPatyUltimoElemento
NodoCheddar* punteroAElUltimoNodoDeLaListaDeCheddars(ListaCheddar* lista) {

	NodoCheddar* nodoAuxiliar = lista->primerElemento;
	while (nodoAuxiliar->siguiente != NULL)
	{
		nodoAuxiliar = nodoAuxiliar->siguiente;
	}
	return nodoAuxiliar;
}



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




















////////////////////////////////////////////////////////////////////////////
//no hay struct de nodo y lista para los panes


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

